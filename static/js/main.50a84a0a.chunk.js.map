{"version":3,"sources":["App.js","index.js"],"names":["App","phaseName","React","stage","setStage","type","setType","experience","setExperience","resistance","setResistance","phase","setPhase","priority","setPriority","drawValue","DrawOrNot","props","drawstate","recipeStage","rate","parseFloat","sum1","sum7","recypeType","sum8","sum2","sum3","sum4","sum5","sum6","sum9","sum10","toFixed","style","textAlign","justify","align","margin","width","border","padding","location","alignment","className","Box","sx","ToggleButtonGroup","color","value","exclusive","onChange","event","newStage","ToggleButton","newType","newExperience","newResistance","newPhase","newPriority","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.50a84a0a.chunk.js","sourcesContent":["import \"./styles.css\";\nimport * as React from \"react\";\n\nimport Box from \"@mui/material/Box\";\nimport ToggleButton from \"@mui/material/ToggleButton\";\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\nimport Button from \"@mui/material/Button\";\n\nexport default function App() {\n  const [stage, setStage] = React.useState(\"web\");\n\n  const stageChange = (event, newStage) => {\n    setStage(newStage);\n  };\n\n  const [type, setType] = React.useState(\"web\");\n\n  const typeChange = (event, newType) => {\n    setType(newType);\n  };\n\n  const [experience, setExperience] = React.useState(\"web\");\n\n  const experienceChange = (event, newExperience) => {\n    setExperience(newExperience);\n  };\n\n  const [resistance, setResistance] = React.useState(\"web\");\n\n  const resistanceChange = (event, newResistance) => {\n    setResistance(newResistance);\n  };\n\n  const [phase, setPhase] = React.useState(\"web\");\n  let phaseName;\n\n  const phaseChange = (event, newPhase) => {\n    setPhase(newPhase);\n  };\n\n  if (phase === \"0.35\") {\n    phaseName = 0;\n  } else if (phase === \"0.40\") {\n    phaseName = 1;\n  } else if (phase === \"0.50\") {\n    phaseName = 2;\n  } else if (phase === \"0.60\") {\n    phaseName = 3;\n  } else if (phase === \"0.70\") {\n    phaseName = 4;\n  }\n\n  const [priority, setPriority] = React.useState(\"web\");\n\n  const priorityChange = (event, newPriority) => {\n    setPriority(newPriority);\n  };\n\n  let drawValue = 1;\n\n  function DrawOrNot(props) {\n    const drawstate = props.drawstate;\n\n    const rate =\n      phase / (parseFloat(experience) * priority) + resistance / type;\n    let sum1 = 0;\n    let recipeStage;\n    if (stage === \"2\") {\n      sum1 = rate * (6 / stage);\n      recipeStage = \"USP\";\n    } else {\n      sum1 = rate * (6 / 1.5);\n      recipeStage = \"DSP\";\n    }\n\n    let sum2 = rate * 2.75; /* Buffers result */\n\n    let sum3 = rate * 1; /* Column preparation results */\n\n    let sum4 = rate * (2.5 / type); /* Media results */\n\n    let sum5 = sum1 + sum2 + sum3;\n\n    let sum6 = sum1 + sum4;\n\n    let sum7;\n\n    let recypeType;\n\n    if (type === \"2\") {\n      sum7 = sum5 / (2.5 * (1 + parseFloat(experience) - resistance));\n      recypeType = \"GR\";\n    } else {\n      sum7 = sum5 / (2 * (1 + parseFloat(experience) - resistance));\n      recypeType = \"SR\";\n    }\n\n    let sum8;\n\n    if (type === \"2\") {\n      sum8 = sum6 / (2.5 * (1 + parseFloat(experience) - resistance));\n    } else {\n      sum8 = sum6 / (2 * (1 + parseFloat(experience) - resistance));\n    }\n\n    let sum9 =\n      (sum5 + sum7) /\n      (parseFloat(experience) + (1 - resistance) / parseFloat(experience));\n\n    let sum10 =\n      (sum6 + sum8) /\n      (parseFloat(experience) + (1 - resistance) / parseFloat(experience));\n\n    if (priority > 0) {\n      if (recipeStage === \"USP\") {\n        return (\n          <>\n            <h2>Estimations</h2>\n            <label>\n              Projected time for the {recypeType} product&nbsp;\n              {recipeStage} phase {phaseName}: {sum1.toFixed(2)} weeks\n            </label>\n            <br></br>\n            <label>\n              {\" \"}\n              Projected time for the {recypeType} media: {sum4.toFixed(2)} weeks\n            </label>\n            <br></br>\n            <label>\n              Total projected building time for {recipeStage} completion:{\" \"}\n              {sum6.toFixed(2)} weeks or {(sum6 * 7).toFixed(2)}&nbsp;calendar\n              days\n            </label>\n            <br></br>\n            <label>\n              Internal review projected time: {sum8.toFixed(2)} weeks\n            </label>\n            <br></br>\n            <label>\n              External approval projected time: {sum10.toFixed(2)} weeks\n            </label>\n            <br></br>\n            <label>\n              From beginning to the end, it has been:{\" \"}\n              {(sum6 + sum8 + sum10).toFixed(2)} weeks or{\" \"}\n              {((sum6 + sum8 + sum10) * 7).toFixed(2)} calendar days\n            </label>\n          </>\n        );\n      } else {\n        return (\n          <>\n            <h2>Estimations</h2>\n            <div\n              style={{\n                textAlign: \"justify\",\n                justify: \"center\",\n                align: \"center\",\n                margin: \"auto\",\n                width: \"800px\",\n                border: \"2px solid lightgrey\",\n                padding: \"5px\"\n              }}\n            >\n              <label>\n                Projected time for the {recypeType} product&nbsp;\n                {recipeStage} phase {phaseName}: {sum1.toFixed(2)} weeks\n              </label>\n              <br></br>\n              <label location=\"left\" alignment=\"left\">\n                {\" \"}\n                Projected time for the {recypeType} buffers: {sum2.toFixed(2)}{\" \"}\n                weeks\n              </label>\n              <br></br>\n              <label>\n                Projected time for the {recypeType} column preparation:{\" \"}\n                {sum3.toFixed(2)} weeks\n              </label>\n              <br></br>\n              <label>\n                Total projected building time for {recipeStage} completion:{\" \"}\n                {sum5.toFixed(2)} weeks or {(sum5 * 7).toFixed(2)}&nbsp;calendar\n                days\n              </label>\n              <br></br>\n              <label>\n                Internal review projected time: {sum7.toFixed(2)} weeks\n              </label>\n              <br></br>\n              <label>\n                External approval projected time: {sum9.toFixed(2)} weeks\n              </label>\n              <br></br>\n              <label>\n                From beginning to the end, it has been:{\" \"}\n                {(sum5 + sum7 + sum9).toFixed(2)} weeks or{\" \"}\n                {((sum5 + sum7 + sum9) * 7).toFixed(2)} calendar days\n              </label>\n            </div>\n          </>\n        );\n      }\n    } else {\n      return <label>empty options</label>;\n    }\n  }\n  function redraw() {\n    if (type > 0) {\n      drawValue = 0;\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1> Welcome to REBCA v.1.1 ! </h1>\n      <h2>(Recipe BASECAMP 2.0 Calculator)</h2>\n      <h4>Recipe Stage</h4>\n      <div align=\"center\">\n        <Box sx={{ width: 250 }}>\n          <ToggleButtonGroup\n            color=\"primary\"\n            value={stage}\n            exclusive\n            onChange={stageChange}\n          >\n            <ToggleButton value=\"2\">USP</ToggleButton>\n            <ToggleButton value=\"1\">DSP</ToggleButton>\n          </ToggleButtonGroup>\n        </Box>\n      </div>\n      <h4>Recipe Type</h4>\n      <div align=\"center\">\n        <Box sx={{ width: 250 }}>\n          <ToggleButtonGroup\n            color=\"primary\"\n            value={type}\n            exclusive\n            onChange={typeChange}\n          >\n            <ToggleButton value=\"2\">GR</ToggleButton>\n            <ToggleButton value=\"1\">SR</ToggleButton>\n          </ToggleButtonGroup>\n        </Box>\n      </div>\n      <div align=\"center\">\n        <h4>Recipe builder experience</h4>\n\n        <Box sx={{ width: 250 }}>\n          <ToggleButtonGroup\n            color=\"primary\"\n            value={experience}\n            exclusive\n            onChange={experienceChange}\n          >\n            <ToggleButton value=\"1\">New</ToggleButton>\n            <ToggleButton value=\"1.50\">Middle</ToggleButton>\n            <ToggleButton value=\"1.75\">Advanced</ToggleButton>\n          </ToggleButtonGroup>\n        </Box>\n      </div>\n      <div align=\"center\">\n        <h4>Resistance</h4>\n\n        <Box sx={{ width: 250 }}>\n          <ToggleButtonGroup\n            color=\"primary\"\n            value={resistance}\n            exclusive\n            onChange={resistanceChange}\n          >\n            <ToggleButton value=\"0.30\">Low</ToggleButton>\n            <ToggleButton value=\"0.45\">Moderate</ToggleButton>\n            <ToggleButton value=\"0.75\">High</ToggleButton>\n          </ToggleButtonGroup>\n        </Box>\n      </div>\n      <div align=\"center\">\n        <h4>Development Phase</h4>\n\n        <Box sx={{ width: 250 }}>\n          <ToggleButtonGroup\n            color=\"primary\"\n            value={phase}\n            exclusive\n            onChange={phaseChange}\n          >\n            <ToggleButton value=\"0.35\">Early</ToggleButton>\n            <ToggleButton value=\"0.40\">1</ToggleButton>\n            <ToggleButton value=\"0.50\">2</ToggleButton>\n            <ToggleButton value=\"0.60\">3</ToggleButton>\n            <ToggleButton value=\"0.70\">Legacy</ToggleButton>\n          </ToggleButtonGroup>\n        </Box>\n      </div>\n      <div align=\"center\">\n        <h4>Level of Priority</h4>\n\n        <Box sx={{ width: 250 }}>\n          <ToggleButtonGroup\n            color=\"primary\"\n            value={priority}\n            exclusive\n            onChange={priorityChange}\n          >\n            <ToggleButton value=\"1\">Normal</ToggleButton>\n            <ToggleButton value=\"1.25\">High</ToggleButton>\n          </ToggleButtonGroup>\n        </Box>\n      </div>\n      <br></br>\n      <div align=\"center\"></div>\n      <DrawOrNot drawstate={drawValue} />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}